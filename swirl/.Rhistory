library(swirl)
swirl()
di <- Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXct.POSIXlt(Sys.time())
t2 <- as.POSIXlt.(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t2)
q()
library(swirl)
swirl()
library(tidyverse)
install.packages("googlesheets")
library(googlesheets)
gc_auth()
?googlesheet
gc_ls()
suppressMessages(library(dplyr))
library(dplyr)
gs_title("Expenses")
library(swirl)
setwd("github/R_language/swirl/")
list.files()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
swirl()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv}
# test1 <- matrix(rnorm(15, 2, 0.5), 4, 4)
# test2 <- makeCacheMatrix(test1)
# cacheSolve(test2)
test1 <- matrix(rnorm(15, 2, 0.5), 4, 4)
test1 <- matrix(rnorm(15, 2, 0.5), 4)
rnorm(15, 2, 0.5)
test1 <- matrix(rnorm(16, 2, 0.5), nrow = 4, ncol = 4)
test2 <- makeCacheMatrix(test1)
cacheSolve(test2)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)}
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv}
test1 <- matrix(rnorm(16, 2, 0.5), nrow = 4, ncol = 4)
test2 <- makeCacheMatrix(test1)
cacheSolve(test2)
solve(test2)
solve(test1)
cacheSolve(test2) == solve(test2)
cacheSolve(test2) == solve(test1)
all(cacheSolve(test2) == solve(test1))
q()
